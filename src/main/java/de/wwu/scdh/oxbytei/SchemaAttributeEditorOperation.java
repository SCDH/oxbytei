package de.wwu.scdh.oxbytei;

import java.util.Arrays;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import ro.sync.ecss.extensions.api.ArgumentDescriptor;
import ro.sync.ecss.extensions.api.ArgumentsMap;
import ro.sync.ecss.extensions.api.AuthorAccess;
import ro.sync.ecss.extensions.api.AuthorOperationException;
import ro.sync.ecss.extensions.commons.operations.ChangeAttributeOperation;

import de.wwu.scdh.oxbytei.commons.OperationArgumentValidator;
import de.wwu.scdh.oxbytei.commons.UpdatableArgumentsMap;
import de.wwu.scdh.oxbytei.commons.RollbackException;
import de.wwu.scdh.oxbytei.commons.DocumentReaderException;
import de.wwu.scdh.teilsp.config.ExtensionConfiguration;
import de.wwu.scdh.teilsp.exceptions.UIException;
import de.wwu.scdh.teilsp.exceptions.ConfigurationException;
import de.wwu.scdh.teilsp.services.extensions.ExtensionException;



/**
 * {@link SchemaAttributeEditorOperation} author mode operation
 * for selecting an attribute value of a list of suggestions. To make
 * these suggestions, the plugins registered for the current editing
 * context are called. The generation of the suggestions is managed by
 * the plugins and the configuration alone. This class only calls the
 * plugin loader.
 *
 * Which selection dialogue is presented to the user can be defined by
 * the operation's arguments.
 *
 * @author Christian LÃ¼ck
 */
public class SchemaAttributeEditorOperation
    extends ChangeAttributeOperation {

    private static final Logger LOGGER = LoggerFactory.getLogger(SchemaAttributeEditorOperation.class);

    /**
     * @see ro.sync.ecss.extensions.api.AuthorOperation#getArguments()
     */
    public ArgumentDescriptor[] getArguments() {
	ArgumentDescriptor[] help = SchemaAttributeEditor.getArguments();
	ArgumentDescriptor[] sup = super.getArguments();
	// TODO: Is there a guarantee, that a missing 'value' argument
	// does not cause an exception? I.e. is it guaranteed, thtere
	// is no validation, before the arugments are passed to the
	// operation?
	ArgumentDescriptor[] all = Arrays.copyOf(sup, sup.length + help.length);
	System.arraycopy(help, 0, all, sup.length, help.length);
	return all;
    }

    /**
     * @see ro.sync.ecss.extensions.api.AuthorOperation#getDescription()
     */
    public String getDescription() {
	return "Set an attribute by presenting the user a selection generated by plugins for the current file context.";
    }

    /**
     * @see ro.sync.ecss.extensions.api.AuthorOperation#doOperation()
     */
    public void doOperation(final AuthorAccess authorAccess, ArgumentsMap args)
	throws AuthorOperationException, IllegalArgumentException {

	// Validate arguments that are passed to helper class
	String attributeName = OperationArgumentValidator.validateStringArgument("name", args);
	String attributeNamespace = OperationArgumentValidator.validateStringArgument("namespace", args, null);
	String location = OperationArgumentValidator.validateStringArgument("elementLocation", args);

	// use helper class to load the plugins und initialize them
	InteractiveOperation contextInteraction = new SchemaAttributeEditor(authorAccess);
	String attribute; // encoding of name and value
	try {
	    contextInteraction.init
		(ExtensionConfiguration.ATTRIBUTE_VALUE,
		 attributeName,
		 attributeNamespace,
		 location);
	    // do the user interaction
	    attribute = contextInteraction.doUserInteraction(args);
	} catch (ExtensionException e) {
	    throw new AuthorOperationException(e.toString());
	} catch (DocumentReaderException e) {
	    throw new AuthorOperationException(e.toString());
	} catch (ConfigurationException e) {
	    throw new AuthorOperationException(e.toString());
	} catch (RollbackException e) {
	    throw new AuthorOperationException("rolling back");
	} catch (UIException e) {
	    throw new AuthorOperationException(e.toString());
	}

	LOGGER.debug("New attribute {}", attribute);

	// write to the argument value by passing it to super class
	if (attribute != null) {
	    // name and value are encoded in attribute
	    String[] parts = attribute.split(" ", 3);
	    attributeName = parts[0];
	    attributeNamespace = parts[1];
	    if (attributeNamespace.equals("null")) {
		attributeNamespace = null;
	    }
	    String attributeValue = parts[2];
	    UpdatableArgumentsMap newArgs = new UpdatableArgumentsMap(args, super.getArguments());
	    newArgs.update("name", (Object) attributeName);
	    newArgs.update("namespace", (Object) attributeNamespace);
	    newArgs.update("value", (Object) attributeValue);
	    super.doOperation(authorAccess, newArgs);
	}
    }

}
