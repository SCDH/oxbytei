package de.wwu.scdh.oxbytei;

import java.awt.Frame;
import java.lang.reflect.InvocationTargetException;
import java.net.URL;
import java.net.MalformedURLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.xml.transform.URIResolver;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.w3c.dom.Element;
import org.w3c.dom.Document;
import org.w3c.dom.Text;

import org.xml.sax.EntityResolver;

import ro.sync.ecss.extensions.api.ArgumentDescriptor;
import ro.sync.ecss.extensions.api.ArgumentsMap;
import ro.sync.ecss.extensions.api.AuthorAccess;
import ro.sync.ecss.extensions.api.AuthorOperationException;
import ro.sync.ecss.extensions.api.AuthorConstants;

import de.wwu.scdh.teilsp.config.EditorVariablesExpander;
import de.wwu.scdh.teilsp.config.ExtensionConfiguration;
import de.wwu.scdh.teilsp.exceptions.ConfigurationException;
import de.wwu.scdh.teilsp.services.extensions.ILabelledEntriesProvider;
import de.wwu.scdh.teilsp.services.extensions.LabelledEntriesLoader;
import de.wwu.scdh.teilsp.services.extensions.ExtensionException;
import de.wwu.scdh.oxbytei.commons.EditorVariablesExpanderImpl;
import de.wwu.scdh.oxbytei.commons.OperationArgumentValidator;
import de.wwu.scdh.teilsp.exceptions.UIException;
import de.wwu.scdh.teilsp.ui.ISelectionDialog;



/**
 * {@link SelectLabelledEntryHelper} provides plugin lookup and
 * interaction with the user.  It is intended to be mixed into a
 * derived {@link AuthorOperation} by composition.
 *
 * After making an instance call {@link doUserInteraction()} to let the
 * user interactively select values generated by the plugins.
 *
 * This class also provides constants for the arguments, with which an
 * author mode action can be parametrized. For that perpose it also
 * provides the static method {@link #getArguments()}.
 *
 * @author Christian LÃ¼ck
 */
public class SelectLabelledEntryInteraction
    implements InteractiveOperation {

    public static final String[] ARGUMENT_BOOLEAN_VALUES = new String[] {
	AuthorConstants.ARG_VALUE_FALSE,
	AuthorConstants.ARG_VALUE_TRUE
    };

    public static final ArgumentDescriptor ARGUMENT_ROLLBACK_ON_CANCEL =
	new ArgumentDescriptor("rollbackOnCancel",
			       ArgumentDescriptor.TYPE_CONSTANT_LIST,
			       "This controls how a cancellation of the user dialog is handled."
			       + " In chains of multiple actions throwing an error an stopping the chain"
			       + " is a good idea."
			       + "\n\nDefaults to true.",
			       ARGUMENT_BOOLEAN_VALUES,
			       AuthorConstants.ARG_VALUE_FALSE);

    public static final ArgumentDescriptor ARGUMENT_MESSAGE =
	new ArgumentDescriptor("message",
			       ArgumentDescriptor.TYPE_STRING,
			       "The message in the user dialog.");

    public static final ArgumentDescriptor ARGUMENT_DIALOG =
	new ArgumentDescriptor("dialog",
			       ArgumentDescriptor.TYPE_STRING,
			       "The user dialogue used for this operation.",
			       "de.wwu.scdh.teilsp.ui.ComboBoxSelectDialog");

    public static final URL DEFAULT_ICON =
	SelectLabelledEntryInteraction.class.getResource("/images/ask-24.png");

    public static final ArgumentDescriptor ARGUMENT_ICON =
	new ArgumentDescriptor("icon",
			       ArgumentDescriptor.TYPE_STRING,
			       "The icon displayed in the user dialogue.",
			       DEFAULT_ICON.toString());

    public static final ArgumentDescriptor ARGUMENT_DELIMITER =
	new ArgumentDescriptor("valuesDelimiter",
			       ArgumentDescriptor.TYPE_STRING,
			       "The string that separates multiple selected values."
			       + "\nDefaults to space.",
			       " ");

    public static final ArgumentDescriptor ARGUMENT_DELIMITER_REGEX =
	new ArgumentDescriptor("valuesDelimiterRegex",
			       ArgumentDescriptor.TYPE_STRING,
			       "A regular expression for splitting multiple values in the current value string."
			       + "\nDefaults to whitespace.",
			       "\\s+");

    /**
     * Return an array of the arguments usually needed.
     */
    public static final ArgumentDescriptor[] getArguments() {
	return new ArgumentDescriptor[] {
	    ARGUMENT_DIALOG,
	    ARGUMENT_ROLLBACK_ON_CANCEL,
	    ARGUMENT_MESSAGE,
	    ARGUMENT_ICON,
	    ARGUMENT_DELIMITER,
	    ARGUMENT_DELIMITER_REGEX
	};
    }

    private static final Logger LOGGER = LoggerFactory.getLogger(SelectLabelledEntryInteraction.class);

    /**
     * The type of the node to be edited.
     */
    protected String nodeType;

    /**
     * Attribute or element name to be set by the operation
     */
    protected String nodeName;

    /**
     * Namespace of the element or attribute name to be set by the operation
     *
     */
    protected String nodeNamespace;

    /**
     * The XPath location relative to the current editing position that identifies the element.
     */
    protected String location;

    /**
     * A map of arguments passed in to the author mode operation
     */
    protected ArgumentsMap arguments;

    private AuthorAccess authorAccess;

    private List<ILabelledEntriesProvider> providers;

    private String currentValue;

    /**
     * The current editing context as an XPath expression.
     */
    private String context;

    /**
     * The constructor loads the plugins for the current editing
     * context and configures them based on the config file.
     *
     * @param authorAccess {@link AuthorAccess} from the author operation
     * @param nodeType the type of the node to be edited
     * @param nodeName the local name of the node to be edited
     * @param nodeNamespace the namespace part of the node's name
     * @param location the relative XPath location with respect to the
     * current caret position that identifies the element
     * @param argumentsMap the map of arguments, passed to the author
     * mode operation
     */
    public SelectLabelledEntryInteraction
	(AuthorAccess authorAccess,
	 final String nodeType,
	 final String nodeName,
	 final String nodeNamespace,
	 final String location,
	 final ArgumentsMap argumentsMap)
	throws AuthorOperationException {

	this.authorAccess = authorAccess;
	this.nodeType = nodeType;
	this.nodeName = nodeName;
	this.nodeNamespace = nodeNamespace;
	this.location = location;
	this.arguments = argumentsMap;

	// get the uri resolver, entity resolver used by oxygen and editing context
	URIResolver uriResolver = authorAccess.getXMLUtilAccess().getURIResolver();
	EntityResolver entityResolver = authorAccess.getXMLUtilAccess().getEntityResolver();
	URL currentFileURL = authorAccess.getEditorAccess().getEditorLocation();

	// get the URL of the configuration file
	String configFile = OxbyteiConstants.getConfigFile();

	// get an expander for editor variables
	EditorVariablesExpander expander = new EditorVariablesExpanderImpl(authorAccess, currentFileURL, true);

	providers = null;
	try {
	    // get the document DOM object
	    Object[] docNodes =
		authorAccess.getDocumentController().evaluateXPath(OxbyteiConstants.DOCUMENT_XPATH, false, false, false, true);
	    Document document = (Document) docNodes[0];

	    // get the current editing context as an XPath expression
	    // TODO: reflect relative 'location'
	    Object[] contxt =
		authorAccess.getDocumentController().evaluateXPath(OxbyteiConstants.CONTEXT_XPATH, true, false, false, true);
	    context = (String) contxt[0];

	    LOGGER.debug("Loading providers for {} {} on context {}", nodeType, nodeName, context);

	    providers =
		LabelledEntriesLoader.providersForContext(document,
							  currentFileURL.toString(),
							  context,
							  nodeType,
							  nodeName,
							  uriResolver,
							  entityResolver,
							  null,
							  configFile,
							  expander);
	} catch (IndexOutOfBoundsException e) {
	    throw new AuthorOperationException("No document node found");
	} catch (ConfigurationException e) {
	    throw new AuthorOperationException("" + e);
	} catch (ExtensionException e) {
	    throw new AuthorOperationException("" + e);
	}

	// get current value
	if (nodeType == ExtensionConfiguration.ATTRIBUTE_VALUE) {
	    Object[] elementNodes =
		authorAccess.getDocumentController().evaluateXPath(location,
								   false, true, true, false);
	    if (nodeNamespace == null) {
		currentValue = ((Element) elementNodes[0]).getAttribute(nodeName);
	    } else {
		currentValue = ((Element) elementNodes[0]).getAttributeNS(nodeNamespace, nodeName);
	    }
	    LOGGER.debug("Current attribute value: {}", currentValue);
	} else {
	    if (nodeType == ExtensionConfiguration.TEXT_NODE) {
		// is that xpath correct?
		Object[] elementNodes =
		    authorAccess.getDocumentController().evaluateXPath(context,
								       false, true, true, false);
		currentValue = ((Text) elementNodes[0]).getWholeText();
	    } else {
		// TODO: what to do in other cases?
		currentValue = null;
	    }
	}

    }

    /**
     * Do the actual user interaction.
     */
    public String doUserInteraction()
	throws AuthorOperationException  {

	// get arguments from arguments map
	String rollbackOnCancelString =
	    OperationArgumentValidator.validateStringArgument(ARGUMENT_ROLLBACK_ON_CANCEL.getName(), arguments);
	boolean rollbackOnCancel = rollbackOnCancelString.equals(AuthorConstants.ARG_VALUE_TRUE);
	String message =
	    OperationArgumentValidator.validateStringArgument(ARGUMENT_MESSAGE.getName(), arguments);
	String iconString =
	    OperationArgumentValidator.validateStringArgument(ARGUMENT_ICON.getName(), arguments);
	URL icon;
	try {
	    icon = new URL(iconString);
	} catch (MalformedURLException e) {
	    icon = DEFAULT_ICON;
	}
	String dialog =
	    OperationArgumentValidator.validateStringArgument(ARGUMENT_DIALOG.getName(), arguments);
	String valuesDelimiter =
	    OperationArgumentValidator.validateStringArgument(ARGUMENT_DELIMITER.getName(), arguments);
	String valuesDelimiterRegex =
	    OperationArgumentValidator.validateStringArgument(ARGUMENT_DELIMITER_REGEX.getName(), arguments);

	
	// split current string value by delimiter regex
	List<String> currentSelection;
	if (valuesDelimiter != null && currentValue != null) {
	    currentSelection = Arrays.asList(currentValue.split(valuesDelimiterRegex));
	} else {
	    currentSelection = new ArrayList<String>();
	    currentSelection.add(currentValue);
	}

	List<String> selected = null;

	// do user interaction
	try {
	    Frame frame = (Frame) authorAccess.getWorkspaceAccess().getParentFrame();
	    // get user dialog from configuration
	    ISelectionDialog dialogView;
	    Class dialogClass = Class.forName(dialog);
	    // for some reason isAssignableFrom does not work, so we use getInterfaces()
	    //if (ISelectionDialog.class.isAssignableFrom(dialogClass)) {
	    boolean implementsISelectionDialog = false;
	    for (Class iface : dialogClass.getInterfaces()) {
		implementsISelectionDialog = implementsISelectionDialog || ISelectionDialog.class.equals(iface);
	    }
	    if (implementsISelectionDialog) {
		dialogView = (ISelectionDialog) dialogClass.getDeclaredConstructor(Frame.class).newInstance(frame);
		dialogView.init(message, icon, currentSelection, providers);
		dialogView.doUserInteraction();
		selected = dialogView.getSelection();
	    } else {
		throw new AuthorOperationException("Configuration ERROR: ISelectionDialog not implemented by "
				      + dialog);
	    }

	} catch (ExtensionException e) {
	    throw new AuthorOperationException("Error in user extension (provider) loaded in user dialog class "
					       + dialog + "\n\n" + e);
	} catch (UIException e) {
	    throw new AuthorOperationException("Error in user dialog class "
					       + dialog + "\n\n" + e);
	} catch (ClassNotFoundException e) {
	    throw new AuthorOperationException("Error loading user dialog class "
					       + dialog + "\n\n" + e);
	} catch (InstantiationException e) {
	    throw new AuthorOperationException("Error instantiating user dialog class "
					       + dialog + "\n\n" + e);
	} catch (IllegalAccessException e) {
	    throw new AuthorOperationException("Error accessing user dialog class "
					       + dialog + "\n\n" + e);
	} catch (NoSuchMethodException e) {
	    throw new AuthorOperationException("Error loading dialog class "
					       + dialog + "\n\n" + e);
	} catch (InvocationTargetException e) {
	    throw new AuthorOperationException("Error loading dialog class "
					       + dialog + "\n\n" + e);
	}

	// // TODO: dialog make pluggable
	// ISelectionDialog dialog = new OxygenSelectionDialog();
	// //ISelectionDialog dialog = new EdiarumSelectionDialog();
	// dialog.init(message, current, providers);
	// List<String> selected = dialog.doUserInteraction();

	// set the value, if not null returned form
	// doUserInteraction(), because null means cancellation
	if (selected != null) {
	    // make the new value
	    String newValue = "";
	    for (int i = 0; i < selected.size(); i++) {
		if (i > 0) {
		    // add separator
		    newValue += valuesDelimiter;
		}
		newValue += selected.get(i);
	    }
	    // store in state variable
	    GlobalState.selection = newValue;
	    // return
	    return newValue;
	} else {
	    if (rollbackOnCancel) {
		throw new AuthorOperationException("rolling back");
	    }
	    // store in state variable
	    GlobalState.selection = currentValue; // TODO: OK ???
	    // return value
	    return null;
	}
    }

}
