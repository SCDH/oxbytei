package de.wwu.scdh.teilsp.ui;

import java.awt.Frame;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import de.wwu.scdh.teilsp.exceptions.UIException;
import de.wwu.scdh.teilsp.services.extensions.ExtensionException;
import de.wwu.scdh.teilsp.services.extensions.ILabelledEntriesProvider;
import de.wwu.scdh.teilsp.services.extensions.ConfigurablePlugin;

import de.wwu.scdh.teilsp.services.extensions.ArgumentDescriptor;
import de.wwu.scdh.teilsp.services.extensions.ArgumentDescriptorImpl;
import de.wwu.scdh.teilsp.services.extensions.URLArgumentDescriptor;


/**
 * {@link ISelectionDialog} is an interface for user dialogues which
 * offer a selection from a list pairs of key and label generated by
 * an {@link ILabelledEntriesProvider}.
 */
public interface ISelectionDialog extends ConfigurablePlugin {

    /**
     * This must be called after {@link init} in order to pass
     * in content completion data.
     *
     * @param currentVal current value
     * @param labelledEntriesProviders a list of initialized {@link ILabelledEntriesProvider}s
     */
    public void setup(List<String> currentVal,
		      List<ILabelledEntriesProvider> labelledEntriesProviders)
	throws UIException, ExtensionException;

    /**
     * This actually does the user interaction. To get its result,
     * call {@link getSelection()}.
     */
    public void doUserInteraction() throws UIException, ExtensionException;

    /**
     * This returns the key selected by the user.
     * {@link doUserInteraction} must be called first.
     *
     * @return The keys of the items selected by the user. It must
     * return {@code null} in case of cancellation by the user.
     */
    public List<String> getSelection() throws UIException;

    /**
     * This static method can be used to re-instantiate a dialog
     * instance that was not initialized with a {@link Frame} object,
     * such as dialogs that are returned by a SPI loader, which
     * allways calls the non-argument constructor.
     *
     * @param dialog  the dialog object to be re-instantiated
     * @param frame   the {@link Frame} object
     * @return a new instance of {@param dialog} constructed with
     * {@link Frame}
     */
    public static ISelectionDialog reinstantiate(ISelectionDialog dialog, Frame frame)
	throws ExtensionException {
	ISelectionDialog dialogView;
	Class<? extends ISelectionDialog> dialogClass = dialog.getClass();
	try {
	    dialogView = (ISelectionDialog) dialogClass.getDeclaredConstructor(Frame.class).newInstance(frame);
	} catch (InstantiationException e) {
	    throw new ExtensionException
		("Error instantiating user dialog class "
		 + dialogClass.toString()
		 + "\n\n" + e);
	} catch (IllegalAccessException e) {
	    throw new ExtensionException
		("Error accessing user dialog class "
		 + dialogClass.toString()
		 + "\n\n" + e);
	} catch (NoSuchMethodException e) {
	    throw new ExtensionException
		("Error loading dialog class "
		 + dialogClass.toString()
		 + "\nConstructor with signature (Frame frame) missing"
		 + "\n" + e);
	} catch (InvocationTargetException e) {
	    throw new ExtensionException
		("Error loading dialog class "
		 + dialogClass.toString()
		 + "\n\n" + e);
	}
	return dialogView;
    }

    /**
     * An argument descriptor usually needed.
     */
    public static final ArgumentDescriptor<String> ARGUMENT_TITLE =
	new ArgumentDescriptorImpl<String>
	(String.class, "title", "The title or message that is shown on the dialog",
	 "Select an item");

    /**
     * An argument descriptor usually needed.
     */
    public static final URLArgumentDescriptor ARGUMENT_ICON =
	new URLArgumentDescriptor
	("icon", "The icon that is shown on the dialog",
	 null);

}
